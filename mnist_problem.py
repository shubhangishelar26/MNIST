# -*- coding: utf-8 -*-
"""MNIST Problem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X7RUhOcnXeRd9GklT-9Q1AeqBOkgV7Q_
"""

from __future__ import print_function
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
from sklearn import datasets
from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt

# load the MNIST digits dataset
mnist = datasets.load_digits()

#  training and testing split
# using 75% of the data for training and 25% for testing
(trainData, testData, trainLabels, testLabels) = train_test_split(np.array(mnist.data),
	mnist.target, test_size=0.25, random_state=42)

# Show sample digits
num_samples = 10
fig, axes = plt.subplots(1, num_samples, figsize=(20, 4))
for i in range(num_samples):
    axes[i].imshow(trainData[i].reshape(8, 8), cmap="gray")
    axes[i].set_title("Label: {}".format(int(trainLabels[i])))
    axes[i].axis('off')
plt.show()

#  10% od data are use  for validation
(trainData, valData, trainLabels, valLabels) = train_test_split(trainData, trainLabels,
	test_size=0.1, random_state=84)

# show the sizes of each data split
print("training data points: {}".format(len(trainLabels)))
print("validation data points: {}".format(len(valLabels)))
print("testing data points: {}".format(len(testLabels)))

kVals = range(1, 30, 2)
accuracies = []

# loop over various values of `k` for the k-Nearest Neighbor classifier
for k in kVals:
    # train the k-Nearest Neighbor classifier with the current value of `k`
    model = KNeighborsClassifier(n_neighbors=k)
    model.fit(trainData, trainLabels)

    # evaluate the model and update the accuracies list
    score = model.score(valData, valLabels)
    print("k=%d, accuracy=%.2f%%" % (k, score * 100))
    accuracies.append(score)

# find the value of k that has the largest accuracy
best_k = kVals[np.argmax(accuracies)]
print("k=%d achieved highest accuracy of %.2f%% on validation data" % (best_k,
                                                                       max(accuracies) * 100))

# Re-train our classifier using the best k value
model = KNeighborsClassifier(n_neighbors=best_k)
model.fit(trainData, trainLabels)

# Find the nearest neighbor for each test image and report the label
nearest_neighbor_labels = model.predict(testData)

# Calculate accuracy
accuracy = np.mean(nearest_neighbor_labels == testLabels)
print("Accuracy using nearest neighbor approach:", accuracy)

# A final classification report
print("EVALUATION ON TESTING DATA")
print(classification_report(testLabels, nearest_neighbor_labels))